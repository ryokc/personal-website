'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _plugin = require('@swup/plugin');

var _plugin2 = _interopRequireDefault(_plugin);

var _helpers = require('swup/lib/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PreserveScrollPlugin = function (_Plugin) {
	_inherits(PreserveScrollPlugin, _Plugin);

	function PreserveScrollPlugin() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, PreserveScrollPlugin);

		var _this = _possibleConstructorReturn(this, (PreserveScrollPlugin.__proto__ || Object.getPrototypeOf(PreserveScrollPlugin)).call(this));

		_this.name = 'PreserveScrollPlugin';

		_this.getURL = function () {
			_this.previousPage = (0, _helpers.getCurrentUrl)();
			return;
		};

		_this.getScrolls = function () {
			var elements = document.querySelectorAll(_this.options.selector);
			if (!(elements.length > 0)) {
				if (_this.options.quiet !== true) console.warn(_this.previousPage + ': there were no elements matching the \'' + _this.options.selector + '\' selector.');
				_this.previousPage = null;
				return;
			}
			elements.forEach(function (element) {
				if (!element.id || element.id === '') {
					if (_this.options.quiet !== true) console.warn(_this.previousPage + ': an element matching the \'' + _this.options.selector + '\' selector has no id.');
					return;
				}
				var id = element.id;
				_this.swupPreserveScroll[id] = {
					top: element.scrollTop,
					left: element.scrollLeft
				};
			});
			_this.previousPage = null;
			return;
		};

		_this.applyScrolls = function () {
			var elements = document.querySelectorAll(_this.options.selector);
			elements.forEach(function (element) {
				if (!element.id || element.id === '') {
					if (_this.options.quiet !== true) console.warn((0, _helpers.getCurrentUrl)() + ': an element matching the \'' + _this.options.selector + '\' selector has no id.');
					return;
				}
				var id = element.id;
				if (_this.swupPreserveScroll[id]) {
					element.scrollTop = _this.swupPreserveScroll[id].top;
					element.scrollLeft = _this.swupPreserveScroll[id].left;
				}
			});
			return;
		};

		var defaultOptions = {
			selector: '.swup-preserve-scroll',
			quiet: false
		};
		_this.options = _extends({}, defaultOptions, options);
		return _this;
	}

	_createClass(PreserveScrollPlugin, [{
		key: 'mount',
		value: function mount() {
			this.swupPreserveScroll = {};

			this.swup.on('transitionStart', this.getURL);
			this.swup.on('willReplaceContent', this.getScrolls);
			this.swup.on('contentReplaced', this.applyScrolls);
		}
	}, {
		key: 'unmount',
		value: function unmount() {
			this.swup.off('willReplaceContent', this.getScrolls);
			this.swup.off('contentReplaced', this.applyScrolls);
			this.swup.off('transitionStart', this.getURL);
		}
	}]);

	return PreserveScrollPlugin;
}(_plugin2.default);

exports.default = PreserveScrollPlugin;